    //===========================================  Prometheus Front-End ================================================================




    //==============================================  ПЕРВАЯ НЕДЕЛЯ ===================================================================

/* Роадмап фронтендера - https://roadmap.sh/roadmaps/frontend.png . Этот курс будет охватывать основы для фронтенд разработчика на карте
    это все блоки до центрального блока - web security knowledge. Все остальное не факт что пригодится, так что нужно учить только
    то что нужно для работы в текущий момент или перспективное(для продвижения карьеры/работы над новый проектом), а не хвататься за
    все подряд, а то получится что можно знать много поверхностно. Также нужно очень много практиковаться что бы теория не забывалась
    и получать новый опыт при разработке и дебаггинге(поиске ошибок) кода. */

         
    
{//    ====    ЭФФЕКТИВНЫЙ ПРОЦЕСС РАЗРАБОТКИ     ====

    /* Для того чтобы писать код эффективно нужно настроить и автоматизировать этот процесс. Он состоит из нескольких частей:
         1) настройка среды разработки,
         2) как искать информацию,
         3) работа с ошибками. */
    

    /*1) Настройка среды разработки:
        - выберете комфортный редактор кода, настройте его так что бы было удобно работать


    2) Поиск информации:
        - MDN https://developer.mozilla.org
        - Stack Overflow https://stackoverflow.com/ - форум для программистов, можно задать вопрос если не нагуглили.
        - научитесь гуглить(правильно вводить запрос) - например если нужно найти метод который превращает строку в число, а мы не
            помним как он называется нужно загуглить - сначала пишем на каком языке(чтобы сузить область поиска) Javascript, потом
            максимально коротко пишем что мы хотим найти convert string to number. Лучше гуглить сразу на английском языке, так 
            больше шансов что информация найдется.
        - задавайте вопросы и помогайте другим.
        - практикуйтесь, выполняйте задание разными способами.


    3) Работа с ошибками:
        - Если код не работает, нужно его дебажить(найти ошибку). Ошибки бывают синтаксические и логические. Про синтаксические
            зачастую браузер сделает сообщение в консоли. Если она там есть но не понятно что за ошибка, можно ее скопировать и
            загуглить.
        - Если ошибка логическая, то нужно понимать что происходит в коде, какие данные должны быть на входе или выходе из
            ф-и, какие значения должны быть присвоены переменным. Это можно сделать двумя способами: 
            а) добавить в код console.log() в нужном месте или ключевое слово debugger - он остановит выполнение ф-и в нужном 
            месте и в инспекторе можно будет просмотреть данные в данный момент, или добавить alert() - но его не рекомендуют 
            использовать, потому что если его забыть удалить то это сразу выразится в работе сайта и будет всем видно в отличие
            от консольлога.

            b)использовать инструменты дебаггинга самого браузера. Рассмотрим на примере GoogleChrome,
            Открыть инструменты разработчика можно нажав f12 или Crtl + Shift + I или нажав в правом верхнем углу 
                три точки(меню)-> другие инструменты-> инструменты разработчика.
            Откроется поле с 8ю закладками. Чаще всего используют:
        
            - Elements - помогает проинспектировать хтмл и ксс код страницы, тут егом можно изменить/удалить и изменения сразу отобразятся
                        в браузере, но при обновлении страницы код загрузится из хтмл файла. Наведя на какой то элемент в коде его 
                        подсветит на странице. Можно также кликнуть правой клавишей  на странице на элемента и выбрать - просмотреть код,
                        тогда этот элемент выберется в вкладке Elements.
        
            - Console - выводил баги и ошибки. Также это место где можно комуницировать со страницей, можно объявлять переменные, обращаться
                        к существующим переменным, вызывать существующие ф-и или объявлять новые.
        
            - Sources - вкладака используется для дэбаггинга. Тут можно видеть какие документы подключены, ставить брейкпоинты, на которых
                        браузер будет останавливать выполнение кода и анализировать данные которые приходят. Например выбрав JS файл
                        видим свой код.
                        function showText(el) {
                            if(el.previousElementSibling.clientHeight === 80){
                                el.previousElementSibling.style.height = "100%";
                                el.innerHTML= "Show less";
                            } else {
                                el.previousElementSibling.style.height = "80px";
                                el.innerHTML= "Read more...";
                            }
                        И кликнув слева от него на номере строки например 2, 4, 6, потом на странице нажимаем на кнопку Read more... и
                        программа останавливается сначала на 2й строке(if), наведя курсор на el в showText(el) можно увидеть информацию
                        про передаваемый объект. А если нужно увидеть какие данные пришли выделяем фрагмент строки
                        el.previousElementSibling.clientHeight и правой кнопкой кликаем на нем выбрав add to watch и в окне справа
                        раскрывается секция watch в которой видно какой элемент и какое значение пришло. 
                        *Что бы продолжать работу программы далее нужно нажать кнопку справа над панелькой "Resume script execution F8",
                        тогда выполнение кода продолжится до следующего брейкпоинта строка 4(innerHTML), нажимаем еще раз и программа
                        проскакивает(не останавливается на строке 6(превая строка блока else)) потому что туда код не дошел, так как
                        выполнилось первое условие блока if else.
        
            - Network - в реальном времени отображает ресурсы на которые посылает запрос браузер и ресурсы которые загрузились. В нашем 
                        случае загрузилась картинка. Кроме этого можно оценить время загрузки этой картинки.
        
            - Timeline - показывает сколько времени нужно для загрузки ресурсов, выполнения скриптов, расчета стилей и рендеринга и
                            отрисовки страницы.
        
            - Resources - отображаются все стореджи(места хранения) на клиентской стороне. */ 3:21






    



}



































